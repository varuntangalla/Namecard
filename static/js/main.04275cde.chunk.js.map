{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","robots.js","App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","cardComponent","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","username","App","onSearchChange","event","setState","target","value","state","filteredRobots","this","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0NAoBeA,EAlBF,SAAC,GAAwB,IAArBC,EAAoB,EAApBA,KAAKC,EAAe,EAAfA,MAAMC,EAAS,EAATA,GAI5B,OAEC,yBAAKC,UAAU,uDACd,yBAAKC,IAAI,SAASC,IAAG,+BAA2BH,EAA3B,cACrB,6BACA,4BAAMF,EAAN,KACA,2BAAKC,EAAL,QCiBaK,EAzBE,SAAC,GAAiB,IAAdC,EAAa,EAAbA,OAEdC,EAAgBD,EAAOE,IAAI,SAACC,EAAKC,GAEtC,OACC,kBAAE,EAAF,CACDC,IAAKD,EACLT,GAAKK,EAAOI,GAAGT,GACfF,KAAMO,EAAOI,GAAGX,KAChBC,MAAOM,EAAOI,GAAGV,UAMlB,OAEC,iCAAOO,EAAP,OCEaK,EApBG,SAAC,GAAiC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAEjC,OAEC,yBAAKZ,UAAU,OAEf,2BACEA,UAAU,mCACZa,KAAK,SACLC,YAAY,cACZC,SAAYH,MCbDR,EAAS,CACpB,CACEL,GAAI,EACJF,KAAM,yBACNmB,SAAU,YACVlB,MAAO,uBAET,CACEC,GAAI,EACJF,KAAM,yBACNmB,SAAU,cACVlB,MAAO,wBAET,CACEC,GAAI,EACJF,KAAM,eACNmB,SAAU,cACVlB,MAAO,yBAET,CACEC,GAAI,EACJF,KAAM,aACNmB,SAAU,UACVlB,MAAO,0BAET,CACEC,GAAI,EACJF,KAAM,kBACNmB,SAAU,WACVlB,MAAO,iCAET,CACEC,GAAI,EACJF,KAAM,iBACNmB,SAAU,SACVlB,MAAO,4BAET,CACEC,GAAI,EACJF,KAAM,UACNmB,SAAU,UACVlB,MAAO,oBAET,CACEC,GAAI,EACJF,KAAM,WACNmB,SAAU,WACVlB,MAAO,0BAET,CACEC,GAAI,EACJF,KAAM,aACNmB,SAAU,eACVlB,MAAO,uBAET,CACEC,GAAI,GACJF,KAAM,qBACNmB,SAAU,gBACVlB,MAAO,4BCNImB,E,YA7Cd,aACC,IAAD,8BACC,+CAWDC,eAAiB,SAACC,GAEjB,EAAKC,SAAS,CAAET,YAAaQ,EAAME,OAAOC,SAZ1C,EAAKC,MAAQ,CAEZnB,OAAQA,EACFO,YAAa,IALrB,E,sEAuBA,IAAD,OACQa,EAAiBC,KAAKF,MAAMnB,OAAOsB,OAAO,SAAAtB,GAChD,OAAOA,EAAOP,KAAK8B,cAAcC,SAAS,EAAKL,MAAMZ,YAAYgB,iBAIlE,OAGE,yBAAK3B,UAAU,MACf,0CACA,kBAAC,EAAD,CAAWY,aAAca,KAAKP,iBAC9B,kBAAC,EAAD,CAAUd,OAAQoB,S,GAtCHK,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.04275cde.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ( { name,email,id }) => {\n\n\n\nreturn (\n\n\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'  >\n\t\t<img alt='robots' src={ `https://robohash.org/${id}?200x200` } />\n\t\t<div>\n\t\t<h2>{ name} </h2>\n\t\t<p>{ email } </p>\n\t\t</div>\n\t</div>\n\n\t)\n\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n\nconst CardList = ( { robots }) => { \n\n\tconst cardComponent = robots.map((user,i) =>{\n\n\t\treturn ( \n\t\t\t< Card \n\t\tkey={i} \n\t\tid= {robots[i].id} \n\t\tname={robots[i].name} \n\t\temail={robots[i].email}\n\t\t/> \n\t)\n\n\t})\n\n\treturn (\n\n\t\t<div>\t{cardComponent}; </div>\n\n\t\t)\n\n}\n\n\n\nexport default CardList;","import React from 'react';\n\n\nconst SearchBox = ({ searchfield, searchChange}) => {\n\n\treturn(\n\n\t\t<div className='pa2'>\n\n\t\t<input \n\t\t  className='pa3 ba b--green bg-lightest-blue'\n\t\ttype='search' \n\t\tplaceholder='Search Gang' \n\t\tonChange = {searchChange}\n\t\t/>\n\n\t\t</div>\n\n\t\t);\n\n\n}\n\nexport default SearchBox;","export const robots = [\n  {\n    id: 1,\n    name: 'Manideep Kamarajugadda',\n    username: 'deep8mani',\n    email: 'deep8mani@gmail.com'\n  },\n  {\n    id: 2,\n    name: 'Surya Vamsee Maddukuri',\n    username: 'Gaali Ninja',\n    email: 'GaaliNinja@gmail.com'\n  },\n  {\n    id: 3,\n    name: 'pavan kumar ',\n    username: 'pataaspavan',\n    email: 'pataaspavan@gmail.com'\n  },\n  {\n    id: 4,\n    name: 'Arun Reddy',\n    username: '2rupees',\n    email: 'reddy@vallapureddy.com'\n  },\n  {\n    id: 5,\n    name: 'Yeshwanth Kumar',\n    username: 'Yesh Boy',\n    email: 'yeshwanthreddy@ankamreddi.com'\n  },\n  {\n    id: 6,\n    name: 'Srikanth Reddy',\n    username: 'Nagidi',\n    email: 'srikanthreddy@nagidi.com'\n  },\n  {\n    id: 7,\n    name: 'Sandeep',\n    username: 'Sandeep',\n    email: 'Sandeep@alla.com'\n  },\n  {\n    id: 8,\n    name: 'Gayathri',\n    username: 'Gayathri',\n    email: 'Gayathri@sainikomu.com'\n  },\n  {\n    id: 9,\n    name: 'Parasuram ',\n    username: 'SP Parasuram',\n    email: 'Parasuram@reddy.com'\n  },\n  {\n    id: 10,\n    name: 'Sai Varun Tangalla',\n    username: 'VarunTangalla',\n    email: 'VarunTangalla@gmail.com'\n  },\n];","import React, { Component } from 'react';\nimport CardList from './CardList';\nimport SearchBox from './SearchBox';\nimport { robots } from './robots';\n\n\nclass App extends Component {\n\n\tconstructor()\n\t{\n\t\tsuper()\n\t\tthis.state = {\n\n\t\t\trobots: robots,\n\t        searchfield: ''\n\n\t\t}\n\n\n\t}\n\n\tonSearchChange = (event) => {\n\n\t\tthis.setState({ searchfield: event.target.value })\n\n\n\t\t//console.log(filteredRobots);\n\n\n\t}\n\nrender()\n{\n\t\tconst filteredRobots = this.state.robots.filter(robots => {\n\t\treturn robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n\n\t\t})\n\n\treturn (\n\n\n\t\t\t<div className='tc'>\n\t\t\t<h1>THE857GANG</h1>\n\t\t\t<SearchBox searchChange={this.onSearchChange} />\n\t\t\t<CardList robots={filteredRobots}/>\n\t\t\t</div>\n\t\t);\n}\n\t\n\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}